
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/demo_life.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_demo_life.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_demo_life.py:


Conway's Game of Life
=====================

John Conway's Game of Life (or just "Life") :cite:`Gardner1970` is a cellular automaton where agents are created
or die based on interactions with nearby agents, according to four rules:

    1. An agent with fewer than two neighbors dies (under-population)
    2. An agent with 2-3 neighbors lives to the next generation
    3. An agent with more than three neighbors dies (over-population)
    4. An agent is created in an unoccupied grid point if there are exactly three adjacent neighbors (reproduction)

From this simple set of rules, complex patterns and behaviors arise, including
Turing-completeness.

Implementation of the Game of Life
----------------------------------
One way to implement Life would to seed every point in the grid with agents
and then change the state of each agent from "alive" to "dead" or vice-versa.
Alternatively, a grid action can be defined that determines when new agents 
are created or existing agents die, as follows:

.. GENERATED FROM PYTHON SOURCE LINES 25-52

.. code-block:: Python

    import numpy as np
    import numba

    from mymesh import *
    import sys
    sys.path.append('../src')
    from myabm import Model

    @numba.njit
    def life_action(agent, grid):

        # Get the states of neighboring agents in the Moore neighborhood
        neighbor_states = [grid.Agents[grid.NodeAgents[i]].state for i in grid.NodeMooreNeighbors[agent.node] if i in grid.NodeAgents]
        # Count the number of 'live' agents in the neighborhood
        nlive = np.sum(np.array([1 if state == 'live' else 0 for state in neighbor_states]))
        if agent.state == 'live':
            if nlive < 2:
                # Die by underpopulation
                grid.change_agent(agent, 'dead', True)
            elif nlive > 3:
                # Die by overpopulation
                grid.change_agent(agent, 'dead', True)
        elif agent.state == 'dead':
            if nlive == 3:
                # Live by reproduction
                grid.change_agent(agent, 'live', True)








.. GENERATED FROM PYTHON SOURCE LINES 53-56

Random initialization of the Game of Life
-----------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 56-68

.. code-block:: Python


    Grid = primitives.Grid2D([0,1,0,1],0.025)

    model = Model(Grid)
    model.agent_actions = (life_action,)
    model.seed(500, state='live')
    model.seed(Grid.NNode-500, state='dead')
    model.iterate(100)

    color = dict(live='black', dead=None)
    model.animate('game_of_life.gif', view='xy', show_mesh=False, state_color=color)





.. image-sg:: /examples/images/sphx_glr_demo_life_001.gif
   :alt: demo life
   :srcset: /examples/images/sphx_glr_demo_life_001.gif
   :class: sphx-glr-single-img







.. GENERATED FROM PYTHON SOURCE LINES 69-73

Gosper glider gun
-----------------
Bill Gosper's glider gun was the first pattern in the Game of Life that was
found to grow infinitely, by generating an infinite sequence of "gliders".

.. GENERATED FROM PYTHON SOURCE LINES 73-97

.. code-block:: Python


    Grid = primitives.Grid2D([0,1,0,1],0.025)
    gosper_gun_nodes = np.array([ 154,  155,  195,  196,  563,  564,  565,  603,  
                                607,  643,  649,  684,  690,  728,  767,  771,  809, 
                                810,  811,  851,  975,  976,  977, 1016, 1017, 1018, 
                                1056, 1060, 1137, 1138, 1142, 1143, 1550,  1551, 
                                1591, 1592])

    # Setup the model
    model = Model(Grid)
    model.agent_actions = (life_action,)

    # Seed the grid
    model.seed(len(gosper_gun_nodes), nodes=gosper_gun_nodes, state='live')
    model.seed(model.NNode-len(gosper_gun_nodes), nodes=np.setdiff1d(np.arange(model.NNode), gosper_gun_nodes), state='dead')

    # Run the simulation
    model.iterate(200)

    color = dict(live='black', dead=None)
    model.animate('gosper_gun.gif', view='xy', show_mesh=False, state_color=color)







.. image-sg:: /examples/images/sphx_glr_demo_life_002.gif
   :alt: demo life
   :srcset: /examples/images/sphx_glr_demo_life_002.gif
   :class: sphx-glr-single-img








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 21.749 seconds)


.. _sphx_glr_download_examples_demo_life.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_life.ipynb <demo_life.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_life.py <demo_life.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: demo_life.zip <demo_life.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
