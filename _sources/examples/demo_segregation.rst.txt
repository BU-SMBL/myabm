
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/demo_segregation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_demo_segregation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_demo_segregation.py:


Schelling's Model of Segregation
================================

Implementation of an agent-based model of segregation by Thomas Schelling 
:cite:`Schelling1971`.
This model was one of the earliest agent-based model, and was initially 
implemented using coins and graph paper. 


Implementation of the Schelling's Segregation Model
---------------------------------------------------
Agent's in this model perform a single action where they migrate based on
the agent state of their neighbors. The decision of whether or not to move is 
based on a single parameter, `'B'`. A second agent parameter `'happy'` is used 
to track whether the agent is happy with its current neighbors

Migration is implemented as two actions: one agent action and one grid action.
The agent action :code:`decide` determines whether the agent is happy or wants to move.
Once all the agents have decided whether they want to move in a particular time
step, the grid action :code:`relocate` finds them all a new location to move to.
Note that in the :ref:`default schedule <Schedule Templates>`, the agent actions
are performed before the grid actions.

.. GENERATED FROM PYTHON SOURCE LINES 27-34

.. code-block:: Python

    import numpy as np
    import numba
    import mymesh
    import sys
    sys.path.append('../src')
    from myabm import Model








.. GENERATED FROM PYTHON SOURCE LINES 35-116

.. code-block:: Python

    @numba.njit
    def decide(agent, grid):
        """
        Agent action to decide whether the agent is happy with its neighborhood

        Parameters
        ----------
        agent : myabm.Agent
            Agent to perform the action.
        grid : myabm.AgentGrid
            Grid environment that the agent is in.

        Returns
        -------
        None.

        """

        neighbor_agentstates = [grid.Agents[grid.NodeAgents[i]].state for i in grid.NodeMooreNeighbors[agent.node] if i in grid.NodeAgents]
        if len(neighbor_agentstates) == 0:
            # No neighbors, no need to move
            agent.parameters['happy'] = 1
            return

        same = np.sum(np.array([state == agent.state for state in neighbor_agentstates]))

        B = same/len(neighbor_agentstates)

        if B < agent.parameters['B']:
            agent.parameters['happy'] = 0
        else:
            agent.parameters['happy'] = 1

    @numba.njit
    def relocate(grid):
        """
        Grid action to relocate all unhappy agents

        Parameters
        ----------
        grid : myabm.AgentGrid
            Grid environment that the agent is in.

        Returns
        -------
        None.

        """

        for agent_id in grid.Agents:
            agent = grid.Agents[agent_id]
        
            if agent.parameters['happy'] == 1:
                continue
        
            else:
                # Search for a new location
                for newnode in np.random.permutation(grid.NNode):
                    # Search all nodes
                    if newnode in grid.NodeAgents:
                        # Occupied - continue searching
                        continue
                
                    # Not occupied - check state of neighbors
                    neighbor_agentstates = [grid.Agents[grid.NodeAgents[i]].state for i in grid.NodeMooreNeighbors[newnode] if i in grid.NodeAgents]


                    if len(neighbor_agentstates) != 0:
                        same = np.sum(np.array([state == agent.state for state in neighbor_agentstates]))
                        newB = same/len(neighbor_agentstates)
                    else:
                        # No neighbors - okay to move to
                        newB = 0

                    if newB >= agent.parameters['B']:
                        # move
                        agent.parameters['happy'] = 1
                        grid.move_agent(agent, newnode)

                        break








.. GENERATED FROM PYTHON SOURCE LINES 117-120

2D model with two agent types
-----------------------------


.. GENERATED FROM PYTHON SOURCE LINES 120-140

.. code-block:: Python


    # Create the mesh for the simulation
    Mesh = mymesh.primitives.Grid2D([0,1,0,1],0.025)

    # Initialize the model and assign actions
    model = Model(Mesh, agent_parameters={'B': 0.6, 'happy':0})
    model.agent_actions = (decide,)
    model.grid_actions = (relocate,)

    # Seed the model with agents with two different states
    model.seed(600, state='0')
    model.seed(600, state='1')

    # Run the simulation for 30 steps
    model.iterate(20)

    # Create an animation
    model.animate('segregation2d.gif', view='xy', show_mesh=False)






.. image-sg:: /examples/images/sphx_glr_demo_segregation_001.gif
   :alt: demo segregation
   :srcset: /examples/images/sphx_glr_demo_segregation_001.gif
   :class: sphx-glr-single-img







.. GENERATED FROM PYTHON SOURCE LINES 141-144

3D model on a torus
-------------------
The model can easily be implemented on different meshes, in 2D or 3D.

.. GENERATED FROM PYTHON SOURCE LINES 144-160

.. code-block:: Python


    Mesh = mymesh.primitives.Torus([0,0,0], 1, 0.5, phi_resolution=80, theta_resolution=80)

    model = Model(Mesh, agent_parameters={'B': 0.3, 'happy':0})
    model.agent_actions = (decide,)
    model.grid_actions = (relocate,)

    model.seed(2000, state='0')
    model.seed(2000, state='1')
    model.seed(2000, state='2')

    model.iterate(10)

    model.animate('segregation3d.gif', show_mesh_edges=False, agent_kwargs={'render_points_as_spheres':True, 'point_size':8})






.. image-sg:: /examples/images/sphx_glr_demo_segregation_002.gif
   :alt: demo segregation
   :srcset: /examples/images/sphx_glr_demo_segregation_002.gif
   :class: sphx-glr-single-img








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.642 seconds)


.. _sphx_glr_download_examples_demo_segregation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_segregation.ipynb <demo_segregation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_segregation.py <demo_segregation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: demo_segregation.zip <demo_segregation.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
